# -*- coding: utf-8 -*-
"""chess_players.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/AshishGusain17/Hackerearth-Deep-Learning-Challenge/blob/master/danceForms.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import os,shutil,math,scipy,cv2
import numpy as np
import matplotlib.pyplot as plt
import random as rn
import seaborn as sn


from sklearn.utils import shuffle
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix,roc_curve,auc

from PIL import Image
from PIL import Image as pil_image
from PIL import ImageDraw

from time import time
from glob import glob
from tqdm import tqdm
from skimage.io import imread
from IPython.display import SVG

from scipy import misc,ndimage
from scipy.ndimage.interpolation import zoom
# from scipy.ndimage import imread

import keras
import tensorflow as tf
from keras import backend as K
from keras.utils.np_utils import to_categorical
from keras import layers
from keras.preprocessing.image import save_img
from keras.utils.vis_utils import model_to_dot
from keras.applications.vgg16 import VGG16,preprocess_input
from keras.models import Sequential,Input,Model
from keras.layers import Dense,Flatten,Dropout,Concatenate,GlobalAveragePooling2D,Lambda,ZeroPadding2D
from keras.layers import SeparableConv2D,BatchNormalization,MaxPooling2D,Conv2D
from keras import regularizers
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam,SGD
from keras.utils.vis_utils import plot_model
from keras.callbacks import ModelCheckpoint,EarlyStopping,TensorBoard,CSVLogger,ReduceLROnPlateau,LearningRateScheduler

from google.colab import drive
drive.mount('/content/drive')

def show_final_history(history):
    fig, ax = plt.subplots(1, 2, figsize=(15,5))
    ax[0].set_title('loss')
    ax[0].plot(history.epoch, history.history["loss"], label="Training loss")
    ax[0].plot(history.epoch, history.history["val_loss"], label="Validation loss")
    ax[1].set_title('acc')
    ax[1].plot(history.epoch, history.history["accuracy"], label="Training accuracy")
    ax[1].plot(history.epoch, history.history["val_accuracy"], label="Validation accuracy")
    ax[0].legend()
    # ax[1].legend()

import h5py
data = h5py.File('/content/drive/My Drive/danceForms/train_224.h5', "r")
print(np.array(data))
XX = data["X"][:]
ZZ = data["Z"][:]

num = XX.shape[0] 
print(XX.shape,ZZ.shape,num)

# label_encoder= LabelEncoder()
# Y = label_encoder.fit_transform(Z)
Z = to_categorical(ZZ,8)
X = XX/255

x_train,x_test,y_train,y_test = train_test_split(X,Z,test_size=0.2,random_state=42)
print(x_train.shape,y_train.shape)

# x_train,y_train = X,Z
# print(x_train.shape,y_train.shape)

augs_gen = ImageDataGenerator(
            zoom_range=0.2, 
            rotation_range=10,
            width_shift_range=0.3, 
            height_shift_range=0.3,
             shear_range=0.4,
             horizontal_flip=True,
              fill_mode='nearest',
             
        featurewise_center=False,  
        samplewise_center=False, 
        featurewise_std_normalization=False,  
        samplewise_std_normalization=False,  
        zca_whitening=False,  
        # rotation_range=20,  
        # zoom_range = 0.1, 
        # width_shift_range=0.2,  
        # height_shift_range=0.2, 
        # horizontal_flip=True,  
        ) 

augs_gen.fit(x_train)

fig,ax=plt.subplots(5,5)
fig.set_size_inches(15,15)
print(len(Z))
for i in range(5):
    for j in range (5):
        l=rn.randint(0,len(Z))
        ax[i,j].imshow(XX[l])
        ax[i,j].set_title('Category: '+ str(l))
        
plt.tight_layout()

ct=0
imgsize = 224
base_model = keras.applications.ResNet50(include_top=False,
                  input_shape = (imgsize,imgsize,3),
                  weights = 'imagenet')
base_model.summary()

model =  keras.models.Sequential()
model.add(base_model)
for layer in base_model.layers:
  ct=ct+1

for layer in base_model.layers:
  if ct>10:
    layer.trainable = False
  else:
    layer.trainable = True
  ct=ct-1
  print(layer,layer.trainable)

model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(1024,activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(512,activation='relu' ))
model.add(Dense(8, activation='softmax'))
model.summary()

SVG(model_to_dot(model).create(prog='dot', format='svg'))
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

checkpoint = ModelCheckpoint(
    './base.model',
    monitor='val_acc',
    verbose=1,
    save_best_only=True,
    mode='max',
    save_weights_only=False,
    period=1
)
earlystop = EarlyStopping(
    monitor='val_loss',
    min_delta=0.001,
    patience=50,
    verbose=1,
    mode='auto'
)
tensorboard = TensorBoard(
    log_dir = './logs',
    histogram_freq=0,
    batch_size=16,
    write_graph=True,
    write_grads=True,
    write_images=False,
)

csvlogger = CSVLogger(
    filename= "training_csv.log",
    separator = ",",
    append = False
)

reduce = ReduceLROnPlateau(
    monitor='val_loss',
    factor=0.1,
    patience=3,
    verbose=1, 
    mode='auto'
)

# callbacks = [tensorboard,csvlogger,reduce]
callbacks = [earlystop,tensorboard,csvlogger,reduce]

opt = SGD(lr=1e-4,momentum=0.99)
opt1 = tf.keras.optimizers.Adam(lr=1e-3)

model.compile(
    loss='categorical_crossentropy',
    optimizer=opt1,
    metrics=['accuracy']
)


history = model.fit_generator(
    augs_gen.flow(x_train,y_train,batch_size=32),
    validation_data  = (x_test,y_test),
    # steps_per_epoch=len(x_train),
    epochs =325, 
    verbose = 1,
    callbacks=callbacks
)

show_final_history(history)
# model.load_weights('./base.model')

# model_json = model.to_json()
# with open("model.json","w") as json_file:
#     json_file.write(model_json)
    
# model.save("model.h5")
# print("Weights Saved")

# use x 
a=model.evaluate(x_train,y_train)
b=model.evaluate(x_test,y_test)

print("Final loss of training data: {}".format(a[0]))
print("Accuracy of training data: {}".format(a[1]))
print("Final loss of test data: {}".format(b[0]))
print("Accuracy of test data: {}".format(b[1]))

ind=0

realdict = {'bharatanatyam' : 0,
        'kathak'        : 1,
        'kathakali'     : 2,
         'kuchipudi'    : 3,
         'manipuri'     : 4,
         'mohiniyattam' : 5,
         'odissi'       : 6,
         'sattriya'     : 7}

dictreverse =  {0 : 'bharatanatyam',
                 1 : 'kathak' ,
                 2 : 'kathakali',
                 3 : 'kuchipudi',
                 4 : 'manipuri',
                 5 : 'mohiniyattam',
                 6 : 'odissi',
                 7 : 'sattriya'}

import h5py
data = h5py.File('/content/drive/My Drive/danceForms/test_224.h5', "r")
print(np.array(data))
testX = data["X"][:]
testNames = data["names"][:]
num = testX.shape[0] 
print(testX.shape,testNames.shape,num)


imageNum = 1
print(testNames[imageNum])
plt.imshow(testX[imageNum])
image = np.expand_dims(testX[imageNum], axis=0)
sd = model.predict(image/255)                        # divide by 255 is must
print(sd)
arg = np.argmax(sd)
print(dictreverse[arg])

import csv

with open('1e.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["Image", "target"])
    for ind in range(num):
        image = np.expand_dims(testX[ind], axis=0)
        sd = model.predict(image/255)
        print(sd)
        arg = np.argmax(sd)
  
        writer.writerow([testNames[ind].decode('utf-8'), dictreverse[arg]])



